import re
from bs4 import BeautifulSoup
import requests
import socket

TIMEOUT = 1

def isWebServer(ip_addr, port_number, protocol) -> str:
	hdrs = {"User-Agent": "curl/7.81.0"} 
	url = "http://" + ip_addr + ":" + str(port_number)
	try:
		header = requests.get(url, params=hdrs, timeout=TIMEOUT)
	except Exception:
		return ""

	headerDictionary = header.headers

	returnString = "\tRoot Request Response: " + str(header.status_code) + "/" + header.reason + "\r\n"
	value = headerDictionary.get("Server")
	returnString += "\tServer: " + value + "\r\n"

	soup = BeautifulSoup(header.content, "html.parser")

	title = soup.find_all('title')
	for t in title:	
		returnString += "\tPage Title: " + t.get_text() 
	returnString += "\r\n"

	#findVulnerabilities(value)
	return returnString

def isSSH(hostname, port):
	res = "" 
	# create a socket connection and grab the banner
	s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
	s.connect((hostname, port))
	regex = "ssh"

	s.settimeout(TIMEOUT)
	try:
		resp = s.recv(1024)
	except:
		return res

	version = re.findall(regex, str(resp, "utf-8").lower())
	if(len(version) > 0): # != None):
		res = str(f'SSH Service Found {str(resp, "utf-8")}')
	s.close()
	#findVulnerabilities(str(resp, "utf-8").strip("\r\n"))
	return res 

def isTelnet(hostname, port):
	res = "" 
	# create a socket connection and grab the banner
	s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
	s.connect((hostname, port))
	regex = "telnet"

	s.settimeout(TIMEOUT)
	try:
		resp = s.recv(1024)
	except:
		return res

	if(len(re.findall(regex,str(resp, "utf-8").lower())) > 0): #!= None):
		res = str(f'Telnet Service Found {resp}\r\n')
	s.close()
	return res

def isSMTP(hostname, port):
	res = "" 
	# create a socket connection and grab the banner
	s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
	s.connect((hostname, port))
	regex = "smtp"

	s.settimeout(TIMEOUT)
	try:
		resp = s.recv(1024)
	except:
		return res

	if(len(re.findall(regex,str(resp, "utf-8").lower())) > 0): # != None):
		res = str(f'SMTP Service Found {resp}\r\n')
	s.close()
	return res

def isFTP(hostname, port):
	res = "" 
	# create a socket connection and grab the banner
	s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
	s.connect((hostname, port))
	regex = "ftp"

	s.settimeout(TIMEOUT)
	try:
		resp = s.recv(1024)
	except:
		return res

	if(len(re.findall(regex,str(resp, "utf-8").lower())) > 0): # != None):
		res = str(f'FTP Service Found {resp}\r\n')
	s.close()

	#findVulnerabilities()
	return res

def fingerprint(ip_addr, port_number, protocol):
	''' ripping off the nmap technique - connect and then wait to get some banners '''
	''' I need an actual connection here, not letting the kernel RST things on us.... 
		But, the data does seem to get to us before the kernel shuts down, so maybe we
		wait a bit longer in the receive side?
	'''
	print = ""

	print = isWebServer(ip_addr, port_number, protocol)
	if(print == ""):
		print = isSSH(ip_addr, port_number)
	if(print == ""):
		print = isTelnet(ip_addr, port_number)
	if(print == ""):
		print = isSMTP(ip_addr, port_number)
	if(print == ""):
		print = isFTP(ip_addr, port_number)
	
	return print 